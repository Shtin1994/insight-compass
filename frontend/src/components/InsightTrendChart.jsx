// frontend/src/components/InsightTrendChart.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Label } from 'recharts';
import { fetchCommentInsightsAPI, fetchInsightItemTrendAPI } from '../services/apiService';
import useDebounce from '../hooks/useDebounce'; 

const InsightTrendChart = () => {
  const [trendData, setTrendData] = useState([]);
  const [loading, setLoading] = useState(false); 
  const [error, setError] = useState(null);

  const [itemType, setItemType] = useState('topic'); 
  const [itemText, setItemText] = useState('');     
  const [daysPeriod, setDaysPeriod] = useState(30);
  const [granularity, setGranularity] = useState('day'); 
  
  const [availableTopics, setAvailableTopics] = useState([]);
  const [availableProblems, setAvailableProblems] = useState([]);
  // –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤, –µ—Å–ª–∏ —Ä–µ—à–∏–º –¥–µ–ª–∞—Ç—å –¥–ª—è –Ω–∏—Ö —Å–ø–∏—Å–∫–∏
  // const [availableQuestions, setAvailableQuestions] = useState([]);
  // const [availableSuggestions, setAvailableSuggestions] = useState([]);


  const [initialLoadDone, setInitialLoadDone] = useState(false);
  const debouncedItemText = useDebounce(itemText, 700); // –£–≤–µ–ª–∏—á–∏–º –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º/–ø—Ä–æ–±–ª–µ–º –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  useEffect(() => {
    const fetchInitialSelectOptions = async () => {
      // –ù–µ —Å—Ç–∞–≤–∏–º setLoading(true) –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–≥–æ –ª–æ–∞–¥–µ—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º
      try {
        const insights = await fetchCommentInsightsAPI(daysPeriod, 15); // –ë–µ—Ä–µ–º —Ç–æ–ø-15 –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
        let defaultTextForTrend = '';
        let defaultTypeForTrend = itemType; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω

        if (insights) {
          if (insights.top_topics && insights.top_topics.length > 0) {
            setAvailableTopics(insights.top_topics.map(t => t.text));
            if (!itemText && defaultTypeForTrend === 'topic') { // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω
              defaultTextForTrend = insights.top_topics[0].text;
            }
          } else {
            setAvailableTopics([]);
          }

          if (insights.top_problems && insights.top_problems.length > 0) {
            setAvailableProblems(insights.top_problems.map(p => p.text));
            if (!itemText && defaultTypeForTrend === 'problem' && defaultTextForTrend === '') {
              defaultTextForTrend = insights.top_problems[0].text;
            }
          } else {
            setAvailableProblems([]);
          }
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è questions –∏ suggestions –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω
        if (defaultTextForTrend && !itemText) {
            setItemText(defaultTextForTrend);
        }

      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ü–∏–π –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Ç—Ä–µ–Ω–¥–∞:", err);
        setAvailableTopics([]);
        setAvailableProblems([]);
      } finally {
        setInitialLoadDone(true); 
      }
    };
    fetchInitialSelectOptions();
  // eslint-disable-next-line react-hooks/exhaustive-deps 
  }, [daysPeriod]); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (—á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏ –±—ã–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã)
                 // itemText –∏ itemType —É–±—Ä–∞–Ω—ã –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ itemText


  const loadTrendData = useCallback(async () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º debouncedItemText –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è, –∏–ª–∏ itemText –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∏–∑ <select>
    const textToFetch = (itemType === 'topic' || itemType === 'problem') ? itemText : debouncedItemText;

    if (!textToFetch || !itemType) {
      setTrendData([]);
      return;
    }
    
    setLoading(true);
    setError(null);
    console.log(`–ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è: —Ç–∏–ø=${itemType}, —Ç–µ–∫—Å—Ç="${textToFetch}", –ø–µ—Ä–∏–æ–¥=${daysPeriod}, –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å=${granularity}`);
    try {
      const data = await fetchInsightItemTrendAPI(itemType, textToFetch, daysPeriod, granularity);
      setTrendData(data.trend_data || []);
    } catch (err) {
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞');
      setTrendData([]);
    } finally {
      setLoading(false);
    }
  }, [itemType, itemText, debouncedItemText, daysPeriod, granularity]); // –î–æ–±–∞–≤–∏–ª–∏ itemText

  useEffect(() => {
     if (initialLoadDone) { 
        // –î–ª—è —Ç–∏–ø–æ–≤ topic/problem, –≥–¥–µ –µ—Å—Ç—å select, –≥—Ä—É–∑–∏–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ itemText
        // –î–ª—è question/suggestion, –≥–¥–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, –≥—Ä—É–∑–∏–º –ø–æ debouncedItemText
        if ((itemType === 'topic' || itemType === 'problem') && itemText) {
            loadTrendData();
        } else if ((itemType === 'question' || itemType === 'suggestion') && debouncedItemText) {
            loadTrendData();
        } else if (!itemText && !debouncedItemText) { // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω
            setTrendData([]);
        }
     }
  }, [initialLoadDone, itemType, itemText, debouncedItemText, loadTrendData]);


  const handleItemTypeChange = (e) => {
    const newType = e.target.value;
    setItemType(newType);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞, –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (newType === 'topic' && availableTopics.length > 0) setItemText(availableTopics[0]);
    else if (newType === 'problem' && availableProblems.length > 0) setItemText(availableProblems[0]);
    else setItemText(''); 
  };
  
  const handleItemTextChange = (e) => {
    setItemText(e.target.value);
  };
  
  const handleDaysPeriodChange = (e) => setDaysPeriod(parseInt(e.target.value));
  const handleGranularityChange = (e) => setGranularity(e.target.value);

  const renderItemTextControl = () => {
    if (itemType === 'topic' && availableTopics.length > 0) {
      return (
        <select 
          id="itemTextSelectTopic" 
          value={itemText} 
          onChange={handleItemTextChange}
          className="w-full text-sm p-2 border border-gray-300 rounded-md bg-white focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É --</option>
          {availableTopics.map(topic => <option key={topic} value={topic}>{topic}</option>)}
        </select>
      );
    }
    if (itemType === 'problem' && availableProblems.length > 0) {
      return (
        <select 
          id="itemTextSelectProblem" 
          value={itemText} 
          onChange={handleItemTextChange}
          className="w-full text-sm p-2 border border-gray-300 rounded-md bg-white focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É --</option>
          {availableProblems.map(problem => <option key={problem} value={problem}>{problem}</option>)}
        </select>
      );
    }
    // –î–ª—è questions –∏ suggestions, –∏–ª–∏ –µ—Å–ª–∏ —Å–ø–∏—Å–∫–∏ —Ç–µ–º/–ø—Ä–æ–±–ª–µ–º –ø—É—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    return (
      <input 
        type="text"
        id="itemTextInput"
        value={itemText}
        onChange={handleItemTextChange}
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω—Å–∞–π—Ç–∞..."
        className="w-full text-sm p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
      />
    );
  };

  return (
    <div className="bg-white p-6 shadow-lg rounded-xl">
      <h3 className="text-xl font-semibold text-gray-800 mb-1">üìä –¢—Ä–µ–Ω–¥ –ò–Ω—Å–∞–π—Ç–∞</h3>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 items-end mb-4 p-3 bg-gray-50 rounded-md">
        <div>
          <label htmlFor="itemType" className="block text-xs font-medium text-gray-600 mb-1">–¢–∏–ø</label>
          <select id="itemType" value={itemType} onChange={handleItemTypeChange} className="w-full text-sm p-2 border border-gray-300 rounded-md bg-white focus:ring-1 focus:ring-blue-500 focus:border-blue-500">
            <option value="topic">–¢–µ–º–∞</option>
            <option value="problem">–ü—Ä–æ–±–ª–µ–º–∞</option>
            <option value="question">–í–æ–ø—Ä–æ—Å</option>
            <option value="suggestion">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</option>
          </select>
        </div>
        
        <div className="lg:col-span-1"> {/* –£–±—Ä–∞–ª col-span-2, —á—Ç–æ–±—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—ã–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω—ã */}
          <label htmlFor="itemTextControl" className="block text-xs font-medium text-gray-600 mb-1">–¢–µ–∫—Å—Ç –∏–Ω—Å–∞–π—Ç–∞</label>
          {renderItemTextControl()}
        </div>

        <div>
          <label htmlFor="daysPeriod" className="block text-xs font-medium text-gray-600 mb-1">–ü–µ—Ä–∏–æ–¥</label>
          <select id="daysPeriod" value={daysPeriod} onChange={handleDaysPeriodChange} className="w-full text-sm p-2 border border-gray-300 rounded-md bg-white focus:ring-1 focus:ring-blue-500 focus:border-blue-500">
            <option value="7">7 –¥–Ω–µ–π</option>
            <option value="30">30 –¥–Ω–µ–π</option>
            <option value="90">90 –¥–Ω–µ–π</option>
            <option value="365">–ì–æ–¥</option>
          </select>
        </div>
        
        <div>
          <label htmlFor="granularity" className="block text-xs font-medium text-gray-600 mb-1">–ì—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å</label>
          <select id="granularity" value={granularity} onChange={handleGranularityChange} className="w-full text-sm p-2 border border-gray-300 rounded-md bg-white focus:ring-1 focus:ring-blue-500 focus:border-blue-500">
            <option value="day">–ü–æ –¥–Ω—è–º</option>
            <option value="week">–ü–æ –Ω–µ–¥–µ–ª—è–º</option>
          </select>
        </div>
      </div>
      
      {loading && <div className="text-center py-10 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞...</div>}
      {error && <div className="text-center py-10 text-red-600 bg-red-50 p-3 rounded-md">–û—à–∏–±–∫–∞: {error}</div>}
      
      {!loading && !error && itemText && trendData.length > 0 && (
        <div style={{ width: '100%', height: 300 }}>
          <ResponsiveContainer>
            <LineChart data={trendData} margin={{ top: 5, right: 30, left: 0, bottom: 25 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
              <XAxis dataKey="date" angle={-35} textAnchor="end" height={60} tick={{ fontSize: 10 }} interval="preserveStartEnd" />
              <YAxis allowDecimals={false} tick={{ fontSize: 10 }}>
                  <Label value="–£–ø–æ–º–∏–Ω–∞–Ω–∏—è" angle={-90} position="insideLeft" style={{ textAnchor: 'middle', fontSize: 12, fill: '#666' }} />
              </YAxis>
              <Tooltip contentStyle={{ fontSize: 12, padding: '5px 10px', borderRadius: '6px' }} />
              <Legend verticalAlign="top" height={36} iconSize={10} wrapperStyle={{fontSize: "12px"}} />
              <Line type="monotone" dataKey="count" name={`"${itemText}"`} stroke="#10b981" strokeWidth={2} activeDot={{ r: 7 }} dot={{r:4, strokeWidth: 2, fill: '#fff'}} />
            </LineChart>
          </ResponsiveContainer>
        </div>
      )}
      
      {!loading && !error && itemText && trendData.length === 0 && (
        <div className="min-h-[250px] flex justify-center items-center">
          <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–µ –¥–ª—è "{itemText}" –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p>
        </div>
      )}
       {!loading && !error && !itemText && (
        <div className="min-h-[250px] flex justify-center items-center">
          <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω—Å–∞–π—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞.</p>
        </div>
      )}
    </div>
  );
};

export default InsightTrendChart;