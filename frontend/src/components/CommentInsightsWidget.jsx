// frontend/src/components/CommentInsightsWidget.jsx
import React, { useState, useEffect } from 'react';
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
// –ï—Å–ª–∏ CommentInsightsWidget.jsx –≤ src/components/
// –∏ apiService.js –≤ src/services/
// —Ç–æ –ø—É—Ç—å –î–û–õ–ñ–ï–ù –ë–´–¢–¨ '../services/apiService'
import { fetchCommentInsightsAPI } from '../services/apiService'; 

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
const calculateFontSize = (count, minCount, maxCount, minFontSize = 0.8, maxFontSize = 1.5) => {
  if (maxCount === minCount || count <= minCount) {
    return `${minFontSize}rem`;
  }
  const percentage = (count - minCount) / (maxCount - minCount);
  const fontSize = minFontSize + percentage * (maxFontSize - minFontSize);
  return `${fontSize.toFixed(2)}rem`;
};

const InsightList = ({ title, items, emoji, isTagCloud = false }) => {
  if (!items || items.length === 0) {
    return (
      <div>
        <h4 className="text-md font-semibold mb-2">{emoji} {title}</h4>
        <p className="text-sm text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>
      </div>
    );
  }

  let minCount = Infinity;
  let maxCount = -Infinity;
  if (isTagCloud && items.length > 0) {
    items.forEach(item => {
      if (item.count < minCount) minCount = item.count;
      if (item.count > maxCount) maxCount = item.count;
    });
  }
  if (isTagCloud && items.length === 1) {
    minCount = maxCount = items[0].count;
  }

  return (
    <div>
      <h4 className="text-md font-semibold mb-2">{emoji} {title}</h4>
      {isTagCloud ? (
        <div className="flex flex-wrap gap-x-3 gap-y-1 items-baseline">
          {items.map((item, index) => (
            <span 
              key={index} 
              className="text-gray-700 hover:text-blue-600 cursor-default transition-colors duration-150"
              style={{ fontSize: calculateFontSize(item.count, minCount, maxCount) }}
              title={`${item.text} (${item.count})`}
            >
              {item.text}
              <span className="text-gray-400" style={{ fontSize: '0.7rem' }}> ({item.count})</span>
            </span>
          ))}
        </div>
      ) : (
        <ul className="list-disc list-inside pl-1 text-sm space-y-1">
          {items.map((item, index) => (
            <li key={index}>
              <span className="text-gray-700">{item.text}</span>
              <span className="text-gray-500 ml-1">({item.count})</span>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

const CommentInsightsWidget = () => {
  const [insights, setInsights] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [daysPeriod, setDaysPeriod] = useState(30); 
  const [topN, setTopN] = useState(5); 

  useEffect(() => {
    const loadInsights = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await fetchCommentInsightsAPI(daysPeriod, topN);
        setInsights(data);
      } catch (err) {
        setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º');
        setInsights(null); 
      } finally {
        setLoading(false);
      }
    };

    loadInsights();
  }, [daysPeriod, topN]); 

  const handlePeriodChange = (newPeriod) => {
    setDaysPeriod(newPeriod);
  };

  const handleTopNChange = (newTopN) => {
    setTopN(newTopN);
  };

  return (
    <div className="bg-white p-6 shadow-lg rounded-xl">
      <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4 gap-3 sm:gap-0">
        <h3 className="text-xl font-semibold text-gray-800">üîç AI-–ò–Ω—Å–∞–π—Ç—ã –∏–∑ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h3>
        <div className="flex space-x-3">
            <select 
                value={daysPeriod} 
                onChange={(e) => handlePeriodChange(parseInt(e.target.value))}
                className="text-sm p-2 border border-gray-300 rounded-md bg-white hover:border-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
            >
                <option value="7">–ó–∞ 7 –¥–Ω–µ–π</option>
                <option value="30">–ó–∞ 30 –¥–Ω–µ–π</option>
                <option value="90">–ó–∞ 90 –¥–Ω–µ–π</option>
                <option value="365">–ó–∞ –≥–æ–¥</option>
            </select>
            <select 
                value={topN} 
                onChange={(e) => handleTopNChange(parseInt(e.target.value))}
                className="text-sm p-2 border border-gray-300 rounded-md bg-white hover:border-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
            >
                <option value="3">–¢–æ–ø 3</option>
                <option value="5">–¢–æ–ø 5</option>
                <option value="10">–¢–æ–ø 10</option>
                <option value="15">–¢–æ–ø 15</option>
            </select>
        </div>
      </div>

      {loading && <div className="text-center py-10 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å–∞–π—Ç–æ–≤...</div>}
      {error && <div className="text-center py-10 text-red-600 bg-red-50 p-3 rounded-md">–û—à–∏–±–∫–∞: {error}</div>}
      
      {!loading && !error && insights && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-8">
          <InsightList title="–û—Å–Ω–æ–≤–Ω—ã–µ –¢–µ–º—ã" items={insights.top_topics} emoji="üè∑Ô∏è" isTagCloud={true} />
          <InsightList title="–ß–∞—Å—Ç—ã–µ –ü—Ä–æ–±–ª–µ–º—ã" items={insights.top_problems} emoji="üòü" isTagCloud={true} />
          <InsightList title="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –í–æ–ø—Ä–æ—Å—ã" items={insights.top_questions} emoji="‚ùì" />
          <InsightList title="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" items={insights.top_suggestions} emoji="üí°" />
        </div>
      )}
      {!loading && !error && !insights && (
         <div className="text-center py-10 text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω.</div> 
      )}
    </div>
  );
};

export default CommentInsightsWidget;