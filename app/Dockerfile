# Используем официальный образ Python 3.10 (или новее, например 3.11)
FROM python:3.10-slim

# Устанавливаем рабочую директорию в контейнере
WORKDIR /app

# Копируем файл с зависимостями
COPY requirements.txt .

# Устанавливаем зависимости
# --no-cache-dir чтобы не хранить кэш pip и уменьшить размер образа
# --upgrade pip чтобы убедиться, что используется последняя версия pip
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Копируем всё содержимое папки app (где лежит Dockerfile) в /app в контейнере
COPY . .

# Открываем порт, на котором будет работать приложение (совпадает с APP_PORT в config.py)
# Это больше для информации, реальный проброс портов делается в docker-compose.yml
EXPOSE 8000

# Команда для запуска приложения при старте контейнера
# Uvicorn будет слушать на 0.0.0.0, чтобы быть доступным извне контейнера
# --host 0.0.0.0 --port 8000 --reload (для разработки, отслеживает изменения кода)
# Для продакшена --reload обычно убирают и могут использовать Gunicorn + Uvicorn workers.
# Пока оставим с --reload для удобства разработки.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
