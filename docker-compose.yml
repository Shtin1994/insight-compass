services:
  db:
    # ... (конфигурация db остается без изменений) ...
    image: postgres:15-alpine
    container_name: insight_compass_db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-insight_compass_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-insight_compass_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    # ... (конфигурация redis остается без изменений) ...
    image: redis:7-alpine
    container_name: insight_compass_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api: # <--- НАШ НОВЫЙ СЕРВИС
    build: # Указываем, что образ нужно собрать из Dockerfile
      context: ./app # Контекст сборки - папка app/
      dockerfile: Dockerfile # Имя Dockerfile
    container_name: insight_compass_api
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000" # Пробрасываем порт приложения
    volumes:
      - ./app:/app # Монтируем локальную папку app/ в /app в контейнере.
                     # Это позволяет видеть изменения кода без пересборки образа (благодаря --reload у Uvicorn).
    environment: # Передаем переменные окружения из .env файла
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-insight_compass_db}
      - POSTGRES_HOST=db # Важно: хост БД для приложения - это имя сервиса 'db'
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - REDIS_HOST=redis # Важно: хост Redis для приложения - это имя сервиса 'redis'
      - REDIS_PORT=${REDIS_PORT:-6379}
      - APP_HOST=${APP_HOST:-0.0.0.0}
      - APP_PORT=${APP_PORT:-8000}
      # TELEGRAM_API_ID=${TELEGRAM_API_ID} # Добавим позже
      # TELEGRAM_API_HASH=${TELEGRAM_API_HASH} # Добавим позже
      # TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN} # Добавим позже
      # OPENAI_API_KEY=${OPENAI_API_KEY} # Добавим позже
    depends_on: # Указываем, что наш сервис api зависит от db и redis
      db:
        condition: service_healthy # Запускать api только после того, как db станет healthy
      redis:
        condition: service_healthy # Запускать api только после того, как redis станет healthy

volumes:
  postgres_data:
  redis_data:

# networks: # Можно будет настроить позже, если потребуется более сложная сетевая конфигурация
#   app_network:
#     driver: bridge